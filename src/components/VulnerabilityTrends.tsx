import React from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { format } from 'date-fns';
import { useQuery } from '@tanstack/react-query';
import { supabase } from '../lib/supabase';

export function VulnerabilityTrends() {
  const { data, isLoading, error } = useQuery({
    queryKey: ['vulnerability-trends'],
    queryFn: async () => {
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      if (userError) throw userError;
      if (!user) throw new Error('User not authenticated');

      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

      const { data, error } = await supabase
        .from('scan_history')
        .select('scan_completed_at, vulnerabilities_found')
        .eq('user_id', user.id)
        .gte('scan_completed_at', thirtyDaysAgo.toISOString())
        .order('scan_completed_at', { ascending: true });

      if (error) throw error;

      // Process data for chart
      const dailyStats = data.reduce((acc: any, scan) => {
        const date = format(new Date(scan.scan_completed_at), 'yyyy-MM-dd');
        if (!acc[date]) {
          acc[date] = {
            date,
            critical: 0,
            high: 0,
            medium: 0,
          };
        }
        
        const vulns = scan.vulnerabilities_found;
        acc[date].critical += vulns.critical || 0;
        acc[date].high += vulns.high || 0;
        acc[date].medium += vulns.medium || 0;
        
        return acc;
      }, {});

      return Object.values(dailyStats);
    },
    refetchInterval: 300000, // 5 minutes
  });

  if (isLoading) {
    return (
      <div className="animate-pulse bg-white rounded-lg shadow-sm p-6">
        <div className="h-64 bg-gray-200 rounded"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-white rounded-lg shadow-sm p-6">
        <p className="text-red-500">Error loading vulnerability trends</p>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow-sm p-6">
      <h2 className="text-lg font-semibold mb-4">Vulnerability Trends (30 Days)</h2>
      <div className="h-64">
        <ResponsiveContainer width="100%" height="100%">
          <LineChart data={data}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis 
              dataKey="date" 
              tickFormatter={(date) => format(new Date(date), 'MMM d')}
            />
            <YAxis />
            <Tooltip 
              labelFormatter={(date) => format(new Date(date), 'MMM d, yyyy')}
            />
            <Legend />
            <Line 
              type="monotone" 
              dataKey="critical" 
              stroke="#ef4444" 
              name="Critical"
              strokeWidth={2}
            />
            <Line 
              type="monotone" 
              dataKey="high" 
              stroke="#f97316" 
              name="High"
              strokeWidth={2}
            />
            <Line 
              type="monotone" 
              dataKey="medium" 
              stroke="#eab308" 
              name="Medium"
              strokeWidth={2}
            />
          </LineChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
}